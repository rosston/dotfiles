#!/bin/bash

set -e

mount_base="${HOME}/codspace"

help () {
  echo "Usage: codspace <subcommand>

Supported subcommands:
    connect
        - mount a codespace and start everything up
    unmount [--all]
        - unmount a codespace (from within the sshfs mounted directory)
        - OR unmount all mounted codespaces (from anywhere)
"
  exit 1
}

connect () {
  selected_codespace_name=$(gh codespace list | fzf | awk '{ print $1 }')
  repo_name=$(gh codespace list --json name,repository -q ".[] | select( .name == \"$selected_codespace_name\" ) | .repository" | awk -F "/" '{ print $2 }')

  echo "Updating Codespaces SSH config"
  gh codespace ssh --config > ~/.ssh/codespaces

  selected_codespace=$(cat ~/.ssh/codespaces | grep '^Host' | grep "$selected_codespace_name" | sed -e 's/Host //')
  mount_point="${mount_base}/${selected_codespace}"

  echo "Mounting Codespace with sshfs"
  mkdir -p "$mount_point"
  sshfs "${selected_codespace}:/workspaces/${repo_name}" "$mount_point"

  local num_panes="3"

  times=`expr "$num_panes" - 1`

  tmux rename-window "$selected_codespace"

  # Create other panes
  for i in `seq 1 "$times"`; do
    dwm.tmux newpanecurdir
  done

  # Rotate back to the original pane
  dwm.tmux rotatecw

  sleep 0.5
  tmux send-keys -t :.0 "cd '$mount_point' && SSH_REMOTE='$selected_codespace' REPO_NAME='$repo_name' nvim" Enter

  dwm.tmux rotateccw
  sleep 0.5
  tmux send-keys -t :.0 "cd '$mount_point' && ssh '${selected_codespace}'" Enter
  tmux send-keys -t :.0 "git fetch -p && git status" Enter

  dwm.tmux rotateccw
  sleep 0.5
  tmux send-keys -t :.0 "cd '$mount_point' && ssh '${selected_codespace}'" Enter

  dwm.tmux rotateccw
}

unmount () {
  if [ "$1" = "--all" ]; then
    all_mounts=$(find "$mount_base" -mindepth 1 -maxdepth 1 -printf "%f\n" | grep -v '^\.')
    for mount in $all_mounts; do
      fusermount3 -u "${mount_base}/${mount}"
      rm -r "${mount_base}/${mount}"
    done

    echo "Unmounted all sshfs codespaces"
  else
    local current_mount=$PWD
    tmux send-keys -t :.0 "cd .. && fusermount3 -u '$current_mount' && rm -r '$current_mount' && echo 'Unmounted'" Enter
  fi
  return 0
}

main () {
  subcommand="$1"
  shift

  case "$subcommand" in
    connect)
      connect $@
      ;;
    umount|unmount)
      unmount $@
      ;;
    help)
      help
      ;;
    *)
      help
      ;;
  esac
}

main $@
